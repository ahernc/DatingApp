tslink.js: string literal: false

L76
https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-3.1&tabs=visual-studio
Including Microsoft.AspNetCore.Mvc.NewtonsoftJson in .net core 3.*

L78
Adding nuget package for AutoMapper.Extensions.Microsoft.DependencyInjection

L86
When creating the member-card Component inside the members folder, it did not automatically 
add the MemberCardComponent declaration in the ngModule in app.module.ts
Also had to add the import manually at the top of app module
Bootstrap card 
Notice on the member-list html, the syntax for the member card and passing in the child component (the user)
    <div *ngFor="let user of users" class="col-lg-2 col-md-3 col-sm-6">
      <app-member-card [user]="user"></app-member-card>
    </div>

Ordering of Use statements in Startup.cs is important 
https://www.udemy.com/course/build-an-app-with-aspnet-core-and-angular-from-scratch/learn/lecture/8708474#questions/10082264


L111: 3rd party File upload:
https://github.com/valor-software/ng2-file-upload
With Angular 9 use version 1.4L
npm install ng2-file-upload@1.4.0 --save 

L118:  Any to Any component communication for components without any direct relationship.
some important notes here: using the AuthService.  Then child components can subscribe to 
the property in the AuthService (for MainPhotoUrl).
Done using the BehaviorSubject. A type of Observable
Can be subscribed to
Subscrivbers can receive updated results
Subject is an observer (so we can send values to it)

Section 12: 
L124:  Reactive forms, as opposed to Template Forms
FormGroup -- tracks the validitity state.  Sounds similar to Validator using ViewState in MVC
validation is in component and not the template
Steps to adding a module.. 
1. declare the object in ts of the new type (e.g. FormGroup)
2. initialise it in ngOnInit (if applicable... e.g. with registerForm)
3. if the module is not already added, include it in app.module.ts (appropriate module should automatically auto include in headers)
4. change html to use syntax... 
Validator is included in framework
A custom validation is for checking matching passwords

L128 
FormBuilder - this most common way to build angular forms

L130
Dates:
http://caniuse.com/
dates... 
polyfills.ts: uncomment the IE9,10,11 es6 options.
just stick to ngx Bootstrap for the datepicker

L133: fixing the photo... 

Practice conditionals..

Summary:
Reactive Forms introduction
validationCustom validators
Validation feedback
The Date Problem
Hooking up to applicable 
Default Photo fix

Section 13: Action Filters in Asp.net core
DateTimes now more user friendly
Tracking when the user last logged in.
TimeAgo pipe
https://www.npmjs.com/package/ngx-timeago
ActionFilters can be added to Controller (e.g. UsersController), or at Application level.. whatever is appropriate

Had to add LastAction property to User 
 dotnet ef migrations add LastActive (make sure sqlite is not holding onto the table)
 dotnet ef database update 


S14: L140 PagedList
PagedList created

L143 
SPA: created interface paginations
in the userservice.ts: Observable of body, means you don't get access top headers.
we need access to pagination in the header... 
so updated the GetUsers method in userservicve
then update the member-list.resolver

L144
pagination from ngxbootstrap https://valor-software.com/ngx-bootstrap/#/pagination
used custom links content
https://valor-software.com/ngx-bootstrap/#/pagination#custom-links-content

https://valor-software.com/ngx-bootstrap/#/pagination#page-changed-event

IN the member=list html:
    [totalItems]="pagination.totalItems"
    [itemsPerPage]="pagination.itemsPerPage"
    [(ngModel)]="pagination.currentPage"
    (pageChanged)="pageChanged($event)"

component:
 pageChanged(event: any): void {
    this.page = event.page;
  }    

Don't forget .AsQueryable(); for subsequent queries

L147 adding the filtering functionality:
Strange issue with the Gender dropdown.
Tried this but it is not the solution here
https://www.udemy.com/course/build-an-app-with-aspnet-core-and-angular-from-scratch/learn/lecture/8715296#questions/5055022

--------
Steps for adding classes, API, implementation of DTO using AutoMapper (Example here is for the Message class)... 
Branch: https://github.com/ahernc/DatingApp/compare/Section-16-Adding-Private-Messaging

. Create class in API.Models
. Entity Framework: add the DbSet
. In DataContext: ensure method exists:
      protected override void OnModelCreating(ModelBuilder builder): 
    In this method, define the structure of the class... e.g. Many to Many, one to many is usually straightforwad, but many to many 
    needs a bit of code. For example:

            builder.Entity<Message>()
                .HasOne(u => u.Sender) // one person sends the message
                .WithMany(m => m.MessagesSent)  // One person can have a collection of sent messages, meaning one-many
                .OnDelete(DeleteBehavior.Restrict); // don't cascade delete

            builder.Entity<Message>()
                .HasOne(u => u.Recipient)  // each message can only be sent to one person
                .WithMany(m => m.MessagesReceived)  // a person can receive many messages
                .OnDelete(DeleteBehavior.Restrict); // don't cascade delete

. dotnet ef migrations add MessageEntityAdded (check the code. Ensure field names are correct. Ensure foreign keys defined correctly)
. dotnet ef database update: then check the database to ensure table created correctly
. Create DTO in API.Dtos if necessary: in this case, MessageForCreationDto
. IDatingRepository: add the methods needed... e.g.:
    Task<PagedList<Message>> GetMessagesForUser();
    Task<IEnumerable<Message>> GetMessageThread(int userId, int recipientId);
. DatingRepository: implement interface.  Leave not implemented for now.
  
         
. Create controller in API.Controllers. This needs to implement ControllerBase. Annotations:
   [ServiceFilter(typeof(LogUserActivity))]
   [Authorize]
   [Route("api/users/{userid}/[controller]")]  // change as necessary
   [ApiController]

. Standard imports tend to include:
using System;
using System.Security.Claims;
using System.Threading.Tasks;
using AutoMapper;
using DatingApp.API.Data;
using DatingApp.API.Dtos;
using DatingApp.API.Helpers;
using DatingApp.API.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;


. First 2 things needed in controller: 
    private readonly IMapper _mapper;
    private readonly IDatingRepository _repo;

. In AutoMapperProfiles:  CreateMap<MessageForCreationDto, Message>();
-- but importantly: Add the Reverse() method so it will hide the password Hash and Salt
  CreateMap<MessageForCreationDto, Message>().Reverse();
  
. ctor: 
      public MessagesController(IDatingRepository repo, IMapper mapper)
        {
            this._repo = repo;
            this._mapper = mapper;
        }


.Added a Helper class: MessageParams
.Then implemented fully the GetMessages method in DatingRepository

--- SPA Side of the Message implementation
L166 Working with the message component in the SPA

_models --> RC --> Generate new interface
message
-- body of this will be 
export interface Message {
}

then add the properties... 

In user.service.ts: new method "getMessages"
make sure to import the right refernence for Message[] 
Paging info is the same as the way we did userparams
study that code for the getMessages function again -- some nice tricks here

_resolvers -- copy member-list.resolver
renamed to messages.resolver.ts
Change the code there to reflect Messages

Because itis a resolver, we need to add it to app.module
In app.module.ts: add it to list of providers.

And add it to routes.ts:
{ path: 'messages', component: MessagesComponent, resolve: {messages: MessagesResolver} },

Now open messages.component.ts
add code as normal to implement it... 

L166: Flesh out the constructor... 
  constructor(private userService: UserService, private authService: AuthService,
      private route: ActivatedRoute, private alertify: AlertifyService) { }

implementation the functions.... similar to user Search results.
pagination

L167: html for messages.component.html
Added a few mits of CSS, and the bootstrap tag  mr-1
to the img on the circular image

Message thread: new function getMessageThread in the user.service

Generate component "member-messages"

Include in app.module MemberMessagesComponent
It should get automatically included

member-messages.component.ts -- added the functionality
parent-child component interation here... 
This is achieved using @Input property
Bring in Input from Angular core
Also need array of Messages
Watch the getMessageThread in the user.service defintion

Design the chat system
member-messages.component.html and CSS

L170: arrive straight ot the messages tab when message is clicked
See https://valor-software.com/ngx-bootstrap/#/tabs
selectTab(tab_id: number)
In the member-detail-component: added #memberTabs to the tabSet
In the component.ts: 
Added  @ViewChild('memberTabs')
Add selectTab function to the member-detail.component.ts
Member Detail:  (click)="selectTab(3)"







